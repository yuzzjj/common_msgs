// Copyright 2024 The OpenRobotic Beginner Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless openbotby applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openbot_bridge.sensor_msgs;

import "openbot_bridge/common_msgs/geometry_msgs.proto";
import "openbot_bridge/common_msgs/std_msgs.proto";

message InsStat 
{
  openbot_bridge.common_msgs.Header header = 1;
  uint32 ins_status = 2;
  uint32 pos_type = 3;
}

// Solution from an inertial navigation system (INS), which usually fuses GNSS
// and IMU measurements.
message Ins 
{
  common_msgs.Header header = 1;

  // The time of position measurement, seconds since the GPS epoch (01/06/1980).
  double measurement_time = 2;  // In seconds.

  // INS solution type.
  enum Type {
    // Do NOT use.
    // Invalid solution due to insufficient observations, no initial GNSS, ...
    INVALID = 0;

    // Use with caution. The covariance matrix may be unavailable or incorrect.
    // High-variance result due to aligning, insufficient vehicle dynamics, ...
    CONVERGING = 1;

    // Safe to use. The INS has fully converged.
    GOOD = 2;
  }
  Type type = 3;

  // Position of the IMU.
  openbot_bridge.common_msgs.PointLLH position = 4;

  // Roll/pitch/yaw that represents a rotation of the intrinsic sequence z-y-x.
  // Note: our definition differs from what NovAtel and aviation use.

  // Roll/pitch/yaw in radians.
  openbot_bridge.common_msgs.Point3D euler_angles = 5;
  // East/north/up in meters per second.
  openbot_bridge.common_msgs.Point3D linear_velocity = 6;
  // Around forward/left/up axes in radians per second.
  openbot_bridge.common_msgs.Point3D angular_velocity = 7;
  // Forward/left/up in meters per square second.
  openbot_bridge.common_msgs.Point3D linear_acceleration = 8;

  // The size of a covariance matrix field may be
  //  3: then the elements are xx, yy, zz.
  //  9: then the elements are xx, xy, xz, yx, yy, yz, zx, zy, zz.
  // If the field size is not 3 or 9, treat the field invalid.

  // 3-by-3 covariance matrix, in m^2.
  repeated float position_covariance = 9 [packed = true];

  // 3-by-3 covariance matrix, in rad^2.
  repeated float euler_angles_covariance = 10 [packed = true];

  // 3-by-3 covariance matrix, in m^2/s^2.
  repeated float linear_velocity_covariance = 11 [packed = true];

  // 3-by-3 covariance matrix, in rad^2/s^2.
  repeated float angular_velocity_covariance = 12 [packed = true];

  // 3-by-3 covariance matrix, in m^2/s^4.
  repeated float linear_acceleration_covariance = 13 [packed = true];
}

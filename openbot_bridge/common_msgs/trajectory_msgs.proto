// Copyright 2024 The OpenRobotic Beginner Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openbot_bridge.common_msgs;

import "openbot_bridge/common_msgs/std_msgs.proto";
import "openbot_bridge/common_msgs/geometry_msgs.proto";
import "openbot_bridge/common_msgs/builtin_interfaces.proto";

message JointTrajectory
{
    // The header is used to specify the coordinate frame and the reference time for
    // the trajectory durations
    Header header = 1;

    // The names of the active joints in each trajectory point. These names are
    // ordered and must correspond to the values in each trajectory point.
    repeated string joint_names = 2;

    // Array of trajectory points, which describe the positions, velocities,
    // accelerations and/or efforts of the joints at each time point.
    repeated JointTrajectoryPoint points = 3;

}

// Each trajectory point specifies either positions[, velocities[, accelerations]]
// or positions[, effort] for the trajectory to be executed.
// All specified values are in the same order as the joint names in JointTrajectory.msg.
message JointTrajectoryPoint
{

    // Single DOF joint positions for each joint relative to their "0" position.
    // The units depend on the specific joint type: radians for revolute or
    // continuous joints, and meters for prismatic joints.
    repeated double positions = 1;

    // The rate of change in position of each joint. Units are joint type dependent.
    // Radians/second for revolute or continuous joints, and meters/second for
    // prismatic joints.
    repeated double velocities = 2;

    // Rate of change in velocity of each joint. Units are joint type dependent.
    // Radians/second^2 for revolute or continuous joints, and meters/second^2 for
    // prismatic joints.
    repeated double accelerations = 3;

    // The torque or the force to be applied at each joint. For revolute/continuous
    // joints effort denotes a torque in newton-meters. For prismatic joints, effort
    // denotes a force in newtons.
    repeated double effort = 4;

    // Desired time from the trajectory start to arrive at this trajectory point.
    Duration time_from_start = 5;
}

message MultiDOFJointTrajectory
{
    // The header is used to specify the coordinate frame and the reference time for the trajectory durations
    Header header = 1;

    // A representation of a multi-dof joint trajectory (each point is a transformation)
    // Each point along the trajectory will include an array of positions/velocities/accelerations
    // that has the same length as the array of joint names, and has the same order of joints as 
    // the joint names array.

    repeated string joint_names = 2;
    repeated MultiDOFJointTrajectoryPoint points = 3;
}

message MultiDOFJointTrajectoryPoint
{
    // Each multi-dof joint can specify a transform (up to 6 DOF).
    repeated Transform transforms = 1;

    // There can be a velocity specified for the origin of the joint.
    repeated Twist velocities = 2;

    // There can be an acceleration specified for the origin of the joint.
    repeated Twist accelerations = 3;

    // Desired time from the trajectory start to arrive at this trajectory point.
    Duration time_from_start = 4;

}

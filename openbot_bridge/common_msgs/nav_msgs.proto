// Copyright 2024 The OpenRobotic Beginner Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openbot_bridge.common_msgs;

import "openbot_bridge/common_msgs/std_msgs.proto";
import "openbot_bridge/common_msgs/builtin_interfaces.proto";
import "openbot_bridge/common_msgs/geometry_msgs.proto";

// An array of poses that represents a Path for a robot to follow.
message Path 
{
    // Indicates the frame_id of the path.
    Header header = 1;

    // Array of poses to follow.
    repeated PoseStamped poses = 2;
}

message Odometry
{
    // This represents an estimate of a position and velocity in free space.
    // The pose in this message should be specified in the coordinate frame given by header.frame_id
    // The twist in this message should be specified in the coordinate frame given by the child_frame_id

    // Includes the frame id of the pose parent.
    Header header = 1;

    // Frame id the pose points to. The twist is in this coordinate frame.
    string child_frame_id = 2;

    // Estimated pose that is typically relative to a fixed world frame.
    PoseWithCovariance pose = 3;

    // Estimated linear and angular velocity relative to child_frame_id.
    TwistWithCovariance twist = 4;
}

// An array of cells in a 2D grid
message GridCells
{
    Header header = 1;

    // Width of each cell
    float cell_width = 2;

    // Height of each cell
    float cell_height = 3;

    // Each cell is represented by the Point at the center of the cell
    repeated Point cells = 4;
}

// This hold basic information about the characteristics of the OccupancyGrid
message MapMetaData
{
    // The time at which the map was loaded
    Time map_load_time = 1;
    
    // The map resolution [m/cell]
    float resolution = 2;
    
    // Map width [cells]
    uint32 width = 3;
    
    // Map height [cells]
    uint32 height = 4;
    
    // The origin of the map [m, m, rad].  This is the real-world pose of the
    // bottom left corner of cell (0,0) in the map.
    Pose origin = 5;
}

message OccupancyGrid
{
    // This represents a 2-D grid map
    Header header = 1;

    // MetaData for the map
    MapMetaData info = 2;

    // The map data, in row-major order, starting with (0,0). 
    // Cell (1, 0) will be listed second, representing the next cell in the x direction. 
    // Cell (0, 1) will be at the index equal to info.width, followed by (1, 1).
    // The values inside are application dependent, but frequently, 
    // 0 represents unoccupied, 1 represents definitely occupied, and
    // -1 represents unknown. 
    repeated int32 data = 3;
}

message Octomap
{
    // A 3D map in binary format, as Octree
    Header header = 1;

    // Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)
    bool binary = 2;

    // Class id of the contained octree 
    string id = 3;

    // Resolution (in m) of the smallest octree nodes
    double resolution = 4;

    // binary serialization of octree, use conversions.h to read and write octrees
    repeated int32 data = 5 [packed=true];
}

message OctomapWithPose
{
    // A 3D map in binary format, as Octree
    Header header = 1;

    // The pose of the octree with respect to the header frame 
    Pose origin = 2;

    // The actual octree msg
    Octomap octomap = 3;
}